import sys
from collections import deque
input = sys.stdin.readline

def dfsRec(adj, visited, start, res):
    visited[start] = True
    res.append(start + 1)

    for i in range(len(adj)):
        if adj[start][i] == 1 and not visited[i]:
            dfsRec(adj, visited, i, res)


def DFS(adj, start):
    visited = [False] * len(adj)
    res = []
    dfsRec(adj, visited, start,res)
    return res

def BFS(adj, start):
    visited = [False] * len(adj)
    res = []
    q = deque()

    visited[start] = True
    q.append(start)

    while q:
        current = q.popleft()
        res.append(current + 1)
        
        for i in range(len(adj)):
            if adj[current][i] == 1 and not visited[i]:
                visited[i] = True
                q.append(i)
  
    return res


N, M, V = map(int, input().split())
edges = [list(map(int, input().split())) for _ in range(M)]
adj = [[0] * N for _ in range(N)]

for x in edges:
    adj[x[0]-1][x[1]-1] = 1
    adj[x[1]-1][x[0]-1] = 1

dfs_result = DFS(adj, V-1)
bfs_result = BFS(adj, V-1)
print(*dfs_result)
print(*bfs_result)
